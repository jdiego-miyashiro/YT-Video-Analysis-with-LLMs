Video Extract : 065 Explore Your Graphs Visually With Jupyter Notebooks - NODES2022 - Sebastian Müller
[00:00:00---->00:00:45]:
(upbeat music) - Thank you so much Alex for
this nice introduction. So, You stole the content
of my first few slides, but so hello, Nodes 22. I'm so happy to be here today. Great to see all those
people interested in graphs as always. And in my session as Alex said, I would like to show you some
cool graph visualization tools for many of the great use
cases for a graph database visualization is super valuable tool that you should be aware of and it doesn't have to be complicated as you will see. Specifically I'll talk about
visually exploring your name, Neo4j Graphs with Jupyter Notebooks

Video Extract : 065 Explore Your Graphs Visually With Jupyter Notebooks - NODES2022 - Sebastian Müller
[00:00:45---->00:01:30]:
and simple literate programming. Whether you are a software
developer or a data scientist or a database administrator
or a project manager, my talk should give you some ideas on when you would want to
be using graph visualization to better understand the
data in your Neo4j databases. After my talk, I bet some of you go and
try this on their own data. It's safe and it's easy and it's free and it's always exciting
to get to actually see your graph data in a meaningful
way for the first time. So some more details about myself. So, together with my team at yWorks, I've been working in the field of graph and diagram visualization for more than what's soon
going to be 25 years.

Video Extract : 065 Explore Your Graphs Visually With Jupyter Notebooks - NODES2022 - Sebastian Müller
[00:01:30---->00:02:15]:
And our tagline is, "The
diagramming experts," and we help teams and
enterprises worldwide with their graph visualization tasks. As graph drawing specialists, we have seen a huge number of use cases and data sets over the years. We've been working on and
providing high quality tools and support to our customers and the community around that topic. And the tool we'll be looking at today is just one of these tools. So here's the agenda,
what will you learn today and what are we going
to see in the session? We'll be looking at easy ways to work with Neo4j databases plus the Neo4j
graph data science library in the context of Jupyter Notebooks. But don't worry, although
this will also mean we'll be looking at some lines of code, this is not going to be really difficult.

Video Extract : 065 Explore Your Graphs Visually With Jupyter Notebooks - NODES2022 - Sebastian Müller
[00:02:15---->00:03:00]:
We look at automating visualization tasks with the help of literate
programming in notebooks. I'm going to show you how to
create custom visualizations that will help us and our users
better understand the data hidden in our graph databases. So for this I'll show you
how to set up Jupyter, Jupyter Notebooks to connect to Neo4j. Use Cypher Query the database contents and the graph data science library to optionally perform some analysis tasks. We'll see how to create
graph visualizations in Jupyter Notebooks and labs. They won't just look beautiful, but we will also make sure
to include the information in the visualization that we
want to provide our users with. So here's a quick overview of how all the things are connected that I'll be using today.

Video Extract : 065 Explore Your Graphs Visually With Jupyter Notebooks - NODES2022 - Sebastian Müller
[00:03:00---->00:03:45]:
Pun intended, the focus is
on yFiles graphs for Jupyter, which is at the top and the
left half basically explains how all this works and adds some context. So yWorks, the company I work at, creates a software development
kit called "yFiles." It allows software developers to build sophisticated graph
visualization applications with great automatic layouts
and rich custom interactions. And the Jupyter widget
we'll be looking at today is also built on top of that library. And by the way, those tools at the center, they are all free to use so
they don't require registration and the lower two don't
even require installation nor download. You can just use
them for free on our website. I will only briefly speak about the data explorer apps in this session.

Video Extract : 065 Explore Your Graphs Visually With Jupyter Notebooks - NODES2022 - Sebastian Müller
[00:03:45---->00:04:30]:
These belong to another set of tools to interactively explore connected data and one of them can be
launched directly from within the Jupyter widget as we'll see, but they can also be used standalone without the Jupyter context. Actually at last year's Nodes conference, I dedicated a whole session
to the data explorer for Neo4j and even more
so the app generator. So I won't be covering it this time so, but feel free to browse the archives and watch the recording
after the conference. All of these tools have built in support for Neo4j databases. So all you need to get started is a set of credentials
to access your database. Read only access is
enough for many use cases and the data never leaves your systems or touches our service. So there's a direct connection
between your machine

Video Extract : 065 Explore Your Graphs Visually With Jupyter Notebooks - NODES2022 - Sebastian Müller
[00:04:30---->00:05:15]:
and your database and you
can run the tools offline behind the firewall if you wish to. So don't be afraid and just try it. Okay, so let's take a look at
the Jupyter Notebook plugin. And by the way, the plugin's
issue tracker is on GitHub. So when you use it and feel
like it's missing a feature, please do file an issue on GitHub and the plug-in is
under active development and the more people find it useful, the more time we can actually
invest into the tool. So this is what the plug-in does. It provides interactive
graph visualization and exploration capabilities
in the form of a widget that can be embedded in Jupyter Notebook and Jupyter lab notebook cells. So you can use it to
visualize connected graph data while from many different
kinds of different data sources

Video Extract : 065 Explore Your Graphs Visually With Jupyter Notebooks - NODES2022 - Sebastian Müller
[00:05:15---->00:06:00]:
that you have access
to from your notebooks. And of course this in
this includes Neo4j graphs which are supported right out the the box. This enables you to
visualize the graph results of cypher queries. So the main difference
to the Neo4j browser where you can do similar
things is the target audience and thus also the support for
more sophisticated use cases. While the Neo4j browser is essential for database
administrator tasks, it's not so much a great
scripting environment for one, it's basically limited to
running cypher queries, but in a Jupyter notebook you can do that but you can do so much more. As a data scientist, you can write complex
interactive notebooks that dynamically query
data from various sources,

Video Extract : 065 Explore Your Graphs Visually With Jupyter Notebooks - NODES2022 - Sebastian Müller
[00:06:00---->00:06:45]:
do sophisticated pre-processing and then combine this with
any number of cypher queries to create a far more complex and hopefully helpful visual realization. Also with widget you can apply various automatic
graph layouts to the graphs in order to highlight the
different aspects of the structure and the connectivity in your data. And with advanced custom
rules for the visualization, you can add style to your nodes and relationships in the diagram and make it easier for the user to quickly see the important data. So we'll get to this in a minute. Installing the widget, it is easy. For example, you can
just use "pip install." So if you have used
Jupyter notebooks before, that should be all familiar to you.

Video Extract : 065 Explore Your Graphs Visually With Jupyter Notebooks - NODES2022 - Sebastian Müller
[00:06:45---->00:07:30]:
Here in this example I'm
also installing the Neo4j and graph data science
packages for later use too. Note that you might need to restart the Jupyter server after this and please be aware that the
functionality at this time, unfortunately for compatibility reasons, you should please open them
using a regular Jupyter Notebook or Jupyter lab server. It doesn't work in all third party viewers like Visual Studio Code yet. So now let's take a look
at the working widget. This over to the live demo. So I have a plain
Jupyter Labs installation plus only the packages
from that last slide. So the graph data science one isn't actually required
to connect to Neo4j,

Video Extract : 065 Explore Your Graphs Visually With Jupyter Notebooks - NODES2022 - Sebastian Müller
[00:07:30---->00:08:15]:
but of course having the
graph data science library available in a Jupyter notebook really allows for some
very cool use cases. For the upcoming examples, I'm using the airports example database that comes with one of the
graph data science tutorials. So I have set up a Neo4j (indistinct) with graph data science library enabled and I uploaded the sample
database data before. So this means I can now run cypher queries right in my Jupyter Notebook
using the Python API. So here I am importing
the graph database object from the Neo4j package in
my Jupyter Notebook cell. Instantiating a driver and the session with a certain database. Then I run the cypher query over here. So far nothing special.

Video Extract : 065 Explore Your Graphs Visually With Jupyter Notebooks - NODES2022 - Sebastian Müller
[00:08:15---->00:09:00]:
And this is all just the regular Neo4j API available in the Python
Jupyter Notebook version. What I'm doing here is the
result of the cypher query. I'm calling the dot graph
function to get the graph as an in-memory data structure. If I execute the cell, I get to see this as the graph which is well not really helpful because there is no built in support for visualizing graphs at the Neo4j level inside Jupyter notebooks. So this is where our
plugin comes in head handy. So what I'm doing is I'm just importing this
graph widget object from the yFiles Jupyter graphs package

Video Extract : 065 Explore Your Graphs Visually With Jupyter Notebooks - NODES2022 - Sebastian Müller
[00:09:00---->00:09:45]:
and calling the constructor
to create a widget. And I'm passing in the graph instance from the cell here above. So this is a Neo4j graph and Neo4j graphs, just along with some other graph forwards, are supported out of the box. So I don't need to do anything special to visualize my Neo4j. All I do is execute this cell and this actually launches the widget. So this is the widget and it consists of two paints where there's the central
graph visualization and if the graph is larger, I can actually use this overview here over here to navigate my larger graph. But in this case it's small enough so I can just like collapse it. And then there's this sidebar
with additional information. I can also expand my screen,

Video Extract : 065 Explore Your Graphs Visually With Jupyter Notebooks - NODES2022 - Sebastian Müller
[00:09:45---->00:10:30]:
so in case my visualization
is really large, so to see more and then
I can navigate the graph by dragging it around or using the mouse or the buttons to zoom in and zoom out. Hovering over the items shows me the properties that are
attached to the in-memory graph. And these are the
properties that are actually from the Neo4j database.
So if you look at these, these are exactly the ones
that you get from the database and the label is the Neo4j. The item named label
here is the Neo4j label. So this is a city and
airport countries and so on. The same goes for the relationships. And clicking on them, I can use the site panel

Video Extract : 065 Explore Your Graphs Visually With Jupyter Notebooks - NODES2022 - Sebastian Müller
[00:10:30---->00:11:15]:
to take a look at the
data in a more static way and for example, to compare items I can with control click and
I can select multiple elements and see there and compare their values, right inside this panel over here. But it may be difficult
to identify a certain item and that's what the search panel is for. So I, I know that there should
be Atlanta somewhere in here. So I just look at this and this lets me focus
the note inside the graph because right now all I see is that this is in the airport. So I would have to like
hover over all these elements or click them to see which
one is the Atlanta port. So we are going to improve
the situation in a minute

Video Extract : 065 Explore Your Graphs Visually With Jupyter Notebooks - NODES2022 - Sebastian Müller
[00:11:15---->00:12:00]:
because by default if you show the widget, you will only see get
to see the note labels and the the relationship types
right in the visualization and you have to, to look at the data . . . panel to see more of the properties. So that's not yet a great visualization and we'll change that in a minute. But before I do that, I'll show you the last
tap we have over here, which is a neighborhood view. And this is a contextual view, meaning that whenever I change the context by selecting an element over here, I get to see the immediate
neighbors of that selected node, as a small utility graph. And in this case all
neighbors one hop away.

Video Extract : 065 Explore Your Graphs Visually With Jupyter Notebooks - NODES2022 - Sebastian Müller
[00:12:00---->00:12:45]:
So I can change the number
of the death over here interactively to get to see the neighbors of the neighbors and the neighbors of the neighbors and the neighbors and so on. And I can use this to
actually navigate my graph. So rather than having
to work on this view, I can click on these items and
they will both synchronize. So whether I'm clicking
over here or there, this lets me navigate my graph and of course that's also
the properties view in here. So that's the basic setup that we have for the
widget and what it does. And it's just one line of code away. And, but as I said, to
make this more useful, we have an API provided

Video Extract : 065 Explore Your Graphs Visually With Jupyter Notebooks - NODES2022 - Sebastian Müller
[00:12:45---->00:13:30]:
because this is actually an powerful API that provides you with
methods and functions, and properties to
customize the visualization to match your requirements. So let's take a look at
at how that will work. So again, I'm running a cypher
query here in this example, which just queries a number
of airports and their cities, how they are related. And later on I will be
passing the graph here to the widget again, but rather than directly
showing the widget, which happens when I just write this one, I'm first configuring
some of the properties. There's properties that have an influence on the general visualization. So like,

Video Extract : 065 Explore Your Graphs Visually With Jupyter Notebooks - NODES2022 - Sebastian Müller
[00:13:30---->00:14:15]:
overall properties that
affect all the items like directed, which tells which is whether
my graph that I'm displaying should by default contain arrowheads at the end of the edges.
So it, for example, in the social networks where
all my relationships are like nodes and they are person
one nodes, person two, then it's probably a
symmetric relationship and I don't want to show them
as a directed relationship. And I can also switch the graph layout because this is something I
forgot you to tell about here is that apart from the default organic layout that we see here, which is a forced directed layout,

Video Extract : 065 Explore Your Graphs Visually With Jupyter Notebooks - NODES2022 - Sebastian Müller
[00:14:15---->00:15:00]:
there's this menu item here which lets me choose
different automatic layouts and different layouts allow you to highlight different
aspects of the graph. For example, the
hierarchic layout shows me that this is actually a (indistinct) graph that I got from the query, which is pretty obvious because the query basically was to match airports and their first degree neighbors. And since the those are all direct edges, we see that there's airports all on the one hand side of
the graph and the continent, cities and regions on
the second partition. So choosing an automatic layout may help your users better
understand the data.

Video Extract : 065 Explore Your Graphs Visually With Jupyter Notebooks - NODES2022 - Sebastian Müller
[00:15:00---->00:15:45]:
And to help them choose the right layout. You can do this programmatically too. So here in this example I'm choosing the orthogonal
layout to be used initially, I am also configuring
the neighborhood view that I just showed you so that it'll be using three levels and initially we'll be
using the, in this case, the first node from my graph. And of course I could be using
more complex logic in here like finding a certain node and showing that node in the neighborhood. I also configure the visualization to not show the sidebar initially. And once the user opens the sidebar, we want to see the
neighborhood immediately. And also just for the sake
of showing more features,

Video Extract : 065 Explore Your Graphs Visually With Jupyter Notebooks - NODES2022 - Sebastian Müller
[00:15:45---->00:16:30]:
I'm disabling the overview
graph visualization in the top left corner here initially. But now for the good
parts, the cool parts, the really useful parts is for binding, for changing the visual appearance of the various nodes in here. So as I said before, by default all of the nodes look the same and they have the same,
they only have their, the aesthetic label in there and we would like to change that. And they also have the same shape, color, and the edges have have the same thickness and you can change all of this
dynamically and data bound. So the most simple form is to, well just change like the
color of all the nodes.

Video Extract : 065 Explore Your Graphs Visually With Jupyter Notebooks - NODES2022 - Sebastian Müller
[00:16:30---->00:17:15]:
And this what works by
using a custom mapping. So this is a mapping
function for each node. It'll return blue. Well that's a pretty similar and actually not quite useful mapping because well, this will change
the color of all the nodes. But it can get more sophisticated and use the data that
is bound and available at the various items to drive the visualization. So in the second line, I'm determining what color to
use for the edges in my graph and we'll be using orange if it's actually in city relationship and all other edges will be black. So this is using

Video Extract : 065 Explore Your Graphs Visually With Jupyter Notebooks - NODES2022 - Sebastian Müller
[00:17:15---->00:18:00]:
the properties that are
available in memory. And there's this extra label property which is mapped to the
Neo4j relationship type, just for convenience. They have both been called
label here in this case. So we are checking the relationship type, whether it's the city, and then we'll be using orange lines and all black for the other ones. So, but apart from only
specifying constant values, you can also make really dynamic values. And specifically for the label mapping, if we look at the airport, there is other information that
we would rather like to see directly in the visualization. For example, I would
prefer seeing the IATA code

Video Extract : 065 Explore Your Graphs Visually With Jupyter Notebooks - NODES2022 - Sebastian Müller
[00:18:00---->00:18:45]:
and the city name for each of the airports directly in the visualization. So what I'm doing here is I'm
declaring a mapping function for each node from the
node properties to a label. And what I'm doing is here I'm querying the IATA code and the city property of the node combining this with a new line character. And I'm only applying
this to the airport nodes because the other node
don't have these properties. And for all other nodes, I'm
just using their name property, which in this case is the city and city actually has a name property. So this should be, should result in an nicer label

Video Extract : 065 Explore Your Graphs Visually With Jupyter Notebooks - NODES2022 - Sebastian Müller
[00:18:45---->00:19:30]:
and a much more usable graph. Last but not least,
there's also the option to change the geometry of the elements. For example, if I want to change their size to like indicate the
importance of those items in my visualization, I can determine, I can
specify a scale factor on a per item basis. So in this case, for example, if we would be looking
at the airport nodes, we see that these airports actually have information about the number of runways each airport has in this dataset.

Video Extract : 065 Explore Your Graphs Visually With Jupyter Notebooks - NODES2022 - Sebastian Müller
[00:19:30---->00:20:15]:
So what could argue that a
larger airport has many runways, and I would like to highlight
these larger airports by increasing the size of these nodes. So this is what I'm doing here. I'm accessing the runways
property of the nodes. I'm dividing it by four and adding one to get values like 1, 1.25, 1.5, 1.75 and so on. This is just an arbitrary
function that I came up with, which worked nice for my example. And all other nodes won't be scaled, so they will stay at their original size. So see, let's see how that works out. So this is the new
graph and as you can see it has a different layout. It uses the orthogonal layout.

Video Extract : 065 Explore Your Graphs Visually With Jupyter Notebooks - NODES2022 - Sebastian Müller
[00:20:15---->00:21:00]:
The node are blue and the edges are, the in city edges are actually orange. And for the various nodes, you can see that the
code and the city name is actually rendered
right on top of the node. And if I open the sidebar, it directly starts with the neighborhood and I just accidentally click the element. But once I reload this, you would see the one
that I specified in code to be highlighted and shown immediately in the neighborhood view. Okay, so this is is just
a little bit of coding and you don't want to like repeat this for all of your experiments. So what you can do of course is

Video Extract : 065 Explore Your Graphs Visually With Jupyter Notebooks - NODES2022 - Sebastian Müller
[00:21:00---->00:21:45]:
with just little helper
function that I created here, and I called it "Create Airport Graph." and it does all of the stuff
that I just showed you, and encapsulated away in a simple function with some simple configurations of it. It's just very simple python and I won't go into the details, but it basically does the
same that I just showed you, with a few more convenience things. So this means that once
I execute this cell, I have this function available
in my Jupyter notebooks. And now displaying a graph from
my database is really easy. I just need to call one
function and passing the graph. So again, I'm running a
cypher query this time

Video Extract : 065 Explore Your Graphs Visually With Jupyter Notebooks - NODES2022 - Sebastian Müller
[00:21:45---->00:22:30]:
there's airport cities, region, countries and continents in there. And when I run this function, I get this result and now you can see that it's looking much nicer than before because the nodes have different shapes depending on the type
we see the right labels, we see different colors and so on. So okay, nice, but still not super
useful. You might think. However you can start to see that with the hierarchic layout for example, with the the right layout, it's getting much easier to understand the structure of your data.

Video Extract : 065 Explore Your Graphs Visually With Jupyter Notebooks - NODES2022 - Sebastian Müller
[00:22:30---->00:23:15]:
Now you see that in your
database there's always this, or at least in the query, there's always these airport
nodes connecting to cities, connected to countries and to continent. So that's a nice representation of our data that we got here. But now let's add graph
data science to this and make this really powerful. So because since this is in a notebook, I can actually use third party packages and APIs like matplotlib, or pandas, to add more features to this. So this is a little bit of programming. So what I'm doing here is
it's not that much code. And what I'm doing here is
using the graph data science

Video Extract : 065 Explore Your Graphs Visually With Jupyter Notebooks - NODES2022 - Sebastian Müller
[00:23:15---->00:24:00]:
module to actually first
calculate some graph data science, in this case the (indistinct) algorithm to calculate some scores
for all the airports because I want to, suppose I want to compare
the various airports in my database and see how they compare with regards to the
(indistinct) algorithm. So what I do here, and I won't go too much into details, I'm using the graph data science module to project a sub-graph which only consists of the airport nodes and the
"has route" relationships because that's the network of how the different pairs
of airports are connected, whether there's a flight
available between them and the has route
relationships in our database

Video Extract : 065 Explore Your Graphs Visually With Jupyter Notebooks - NODES2022 - Sebastian Müller
[00:24:00---->00:24:45]:
connects all the database of the airports. And with the page rank, I can get a measure of how important or how central a certain airport will be. So calling the GDS library, I get an in-memory result
that I can work with in my Jupyter Notebook cell. And since this is actually a pandas table, I can use the pandas API to, for example, filter the table and
only include those nodes that are above a certain score. So I don't get to see the
super unimportant airports

Video Extract : 065 Explore Your Graphs Visually With Jupyter Notebooks - NODES2022 - Sebastian Müller
[00:24:45---->00:25:30]:
according to my measurement for example. So what I'm doing is
I'm filtering the table and then for display I'm again executing a very simple cypher query. So I'm just loading the nodes that I got from the
results from the graph data science algorithm. So these, this will just load the nodes with a score larger than
one point greater than 1.5. So we are loading this
and displaying this graph. Then I'm again setting
the labels over here, but also I'm setting a custom scaling which actually uses the
ranks that we just calculated

Video Extract : 065 Explore Your Graphs Visually With Jupyter Notebooks - NODES2022 - Sebastian Müller
[00:25:30---->00:26:15]:
to scale the nodes
according to their ranks. So, and I can use a custom function here. So any function that suits my use case, I can just code here because
this is all just python codes, simple python code. So I'm, I'm using a square root function. So not to scale the nodes linearly with respect to their scores because that would lead to super huge nodes in the visualization. So, I thought that using
square root works well and what I'm also doing is
I'm using the rank information to color map the nodes. So I'm using third party library, this is from matplotlib
to get a color map, which basically gives me a nice
gradient of different colors and I'm using,

Video Extract : 065 Explore Your Graphs Visually With Jupyter Notebooks - NODES2022 - Sebastian Müller
[00:26:15---->00:27:00]:
I'm mapping the range of the values that I have in my data
set, in my results set, to map them to these colors. Last but not least, you may
have seen that in the data set, the airports actually have
some interesting properties called "lon" and "lat" which is actually longitude and latitude. So these are geo coordinates. So I am using another mapping
that I can specify here, which is the node position mapping, which allows me for each node, to specify where on the
screen I want it to be placed. So why not use the geo
coordinates for that? So I'm just using this super
scientific formula over here

Video Extract : 065 Explore Your Graphs Visually With Jupyter Notebooks - NODES2022 - Sebastian Müller
[00:27:00---->00:27:45]:
that I came up with multiplying
the longitude value by 150 and the latitude by minus 200. And if I run this, we get to see this, DNS hiccup, but there's the results. So, if you look at this, you will probably recognize that over here there's actually Europe,
this is the world map, there's Asia over here, somewhere here should be Australia, south America and the
US. And if you zoom in, we see that there's
these airports over here. For example, this is
Paris Charles du Gaulle, important airport, which we see because it has this light
green and the larger size according to our measurements.

Video Extract : 065 Explore Your Graphs Visually With Jupyter Notebooks - NODES2022 - Sebastian Müller
[00:27:45---->00:28:30]:
So that's some nice combination
of graph data science, visualization and geocoding. But it's not really a graphy example. So as a last example, we are going to use graph data science to do a really graphy tasks and that is calculating a shortest path. So we'll be using the
shortest path algorithm from the graph data science library to calculate the shortest path between a set of airports. And for this, again, I'm
creating a projection for the graph data science library, which contains the airports and has route relationships only. And we're including the distance property,

Video Extract : 065 Explore Your Graphs Visually With Jupyter Notebooks - NODES2022 - Sebastian Müller
[00:28:30---->00:29:15]:
which is available in our data set. So there's someone calculated the distances
between all those airports, the flight distances, and we used these distances to calculate the shortest path
between one pair of airports. And I'm using this utility function from the GDS library
to load these airports. In this case it's Stuttgart and ART calling the shortest path method. And what this results in
is just a set of nodes, just a set of airport nodes. So because the draft data science library only ran the query the . . .

Video Extract : 065 Explore Your Graphs Visually With Jupyter Notebooks - NODES2022 - Sebastian Müller
[00:29:15---->00:30:00]:
the algorithm on the airport nodes and it doesn't have the information about the other nodes
that we have in there like country location, city,
country, continent and so on. So what I'm doing next is
with those results, again, I'm doing another query to actually load a sub-graph
from the full database. And this contains both the airports that we've
got from our result nodes as well as the connecting
route between them. But for each of the
airports we also include the chain of the city, the region, the country and the continent for both the source and the target node. So this will result in a visualization

Video Extract : 065 Explore Your Graphs Visually With Jupyter Notebooks - NODES2022 - Sebastian Müller
[00:30:00---->00:30:45]:
that contains the shortest
path between SDR and ART and all the intermediate path
elements if there are any. And for each of the
intermediate path elements, there's also information about,
well, the location of those. Then I'm using the
function that I used before and that's the only part where actually our widget comes into play. So this is all unrelated to the widget and if I execute this, I
get to see this result. Let's take a look at this. The hierarchic layout is probably best because what we see here is this is our shortest path that's from Stuttgart Airport,

Video Extract : 065 Explore Your Graphs Visually With Jupyter Notebooks - NODES2022 - Sebastian Müller
[00:30:45---->00:31:30]:
going to London, Heathrow,
Philadelphia, and ART, that's Watertown International Airport. And we also see the distances
between those elements and for each of those elements we see, what city, region and country they are in. So we see that Stuttgart
and London is both in on the continent, Europe, and the other two airports are in the US and the US is according to this data, is actually North American. And I believe it says it's also Africa, which is probably not correct, but that's a problem with the data and not something that we
will have to work with today. It also says that London is
both in England and Canada,

Video Extract : 065 Explore Your Graphs Visually With Jupyter Notebooks - NODES2022 - Sebastian Müller
[00:31:30---->00:32:15]:
so that's likely an issue
that we have in our data. But yeah, this is nice. So this is makes for nice
visualization of our results, but we can do more. And as a last step, I'm going to show you an integration that we just added to this plugin and that is an integration with our suite of Data
Explorer applications. So with all of these results, I can just open them in
an external application that we have hosted on our website, which lets me visualize and explore the
graph in a different way. And this is actually outside the scope of the Jupyter lab extension.

Video Extract : 065 Explore Your Graphs Visually With Jupyter Notebooks - NODES2022 - Sebastian Müller
[00:32:15---->00:33:00]:
So this could also be used
with different data sources and we have the same one for Neo4j. So, but this is different, so it's not going to the database, it's just allowing you to
explore the schema and the data in from the query that you
had in your Neo4j notebook. So I can just like, iteratively load the other
elements in here and explore them just as you may know way
from the Neo4j browser. And I can also, in this case
just reveal the entire graph. And now what's the difference here? I can get much more sophisticated with regards to visualization.

Video Extract : 065 Explore Your Graphs Visually With Jupyter Notebooks - NODES2022 - Sebastian Müller
[00:33:00---->00:33:45]:
So there's options to
style those elements and, it took me some time to come
up with a nicer styling, so I prepared this one, so
let me just load them in. And now we have like
super cool visualization that's only possible within
the data explorer here where you have like, there's icons in there and
there's additional code in there. So that's much more
sophisticated than what we, we've seen before, but it's also more helpful
and more end user friendly so to say. And what's also unique to this application is the last thing and that is that, if we look at the schema,

Video Extract : 065 Explore Your Graphs Visually With Jupyter Notebooks - NODES2022 - Sebastian Müller
[00:33:45---->00:34:30]:
we actually have the
geo coordinates in here, so wouldn't it be cool to see those nodes actually on a map view? And this is what what we can do in here. I mark this property to
be used as map coordinates and now if I go back to the explorer and hit the map layout, I get finally get to see my route, which goes from Stuttgart,
via London, Heathrow, over to Philadelphia and Watertown. Okay, so much for this application. Let's see the summary. We arrived at the summary
slide hopefully in time. I hope I was able to show you
that creating visualizations

Video Extract : 065 Explore Your Graphs Visually With Jupyter Notebooks - NODES2022 - Sebastian Müller
[00:34:30---->00:35:15]:
from your Neo4j data with
the help of Jupyter Notebooks is easy and powerful. If you are a data scientist
working with Jupyter Notebooks, you can use the yFiles
graph for Jupyter Plugin as an entry point to render
your Neo4j cypher query results. And you can combine the powerful tools and scripting capabilities that you get from Jupyter Notebooks to create bespoke helpful visualizations, run graph data science algorithms and interactively explore your graphs both directly in the notebook as well as conveniently in
the generic Data Explorer app. That's it for now. We would love to hear your
feedback about our tools. It's your input that helps
us continuously improve them. So try the tools, share
them with the community, leave us a star or a
like in the social media

Video Extract : 065 Explore Your Graphs Visually With Jupyter Notebooks - NODES2022 - Sebastian Müller
[00:35:15---->00:36:00]:
or of course contact us directly. I'll also hang around in the chat and I'm happy to answer
your questions there. As always, happy diagram with your Neo4j databases and the visualization tools by Webworks. Thanks and everyone enjoy the
conference. Back to you Alex. - That was great. People seem to like it as
well. I see lots of clapping, so that's always good encouraging because, you know, virtual conference so we don't hear your clapping. We you need to, you
need to emoji the claps. (Alex laughing) - Thank you so much. - We have, we are on a
little bit over time, so we don't have much time for question, but I think we can squeeze
in one comes from Michael, "Does it work in Google CoLab?"

Video Extract : 065 Explore Your Graphs Visually With Jupyter Notebooks - NODES2022 - Sebastian Müller
[00:36:00---->00:36:45]:
Because you said there's some
restrictions on the usage. - At this very moment it doesn't, but this should be actually doable and this is actually very
high up in our roadmap, so I hope we are going to
see Google CoLab support in one of the next versions. Probably if all goes well in q1, meaning, yeah, well early in 2023. So yeah, that's, it's up on our roadmap, but at the moment it doesn't
so really Jupyter Lab or Jupyter notebooks. Sorry for that. - No problem. And then from Jason, maybe we squeeze this in as well, "Will you share the, your notebook file with your presentation or
make it public somewhere?" So people can- - Yeah, I can do that.

Video Extract : 065 Explore Your Graphs Visually With Jupyter Notebooks - NODES2022 - Sebastian Müller
[00:36:45---->End of Video]:
There's already a simple example which I actually based my slides upon is already on the GitHub
repository of the plugin. So there's a generic Neo4j
example and the GDS example. So, but I'm going to share
this specific one too soon. - Okay, perfect. Well done. Thank you very much Sebastian, thank you for the great
presentation and yeah, see you soon on another Nodes
Conference or Neo4j event. (Alex laughing) - Thank you, have a great day. - Thank you.

